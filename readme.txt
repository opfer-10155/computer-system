課題１

説明
N := 平面にうつ点の数
X := x^2 + y^2 <= 1を満たす点(x, y)の個数
円周率はpi = 4*X / N で計算できる。

Xのみ保存すればよいので
点(x, y)をN個配列に保存する必要はない。

2つの乱数を生成してx, yに割り当て、x^2 + y^2 <= 1を満たすならXをカウントアップする
上の操作をN回繰り返せばよい。

結果
入力:
100000000

出力:
initial pi = 0.000000
calculated pi = 3.141493


区間推定(montecalro_estimate.c)
点の数Nのモンテカルロ法による円周率piの推定をK回行って得られたK個のデータで、piの95%信頼区間を構成したい。
データの平均をAVG
データの不偏分散をVとすると
求める信頼区間は[AVG - 1.96 * sqrt(V/m), AVG + 1.96 * sqrt(V/m)]

結果
入力:
点の数 = 10000000
試行回数 = 100

出力:
πの95パーセント信頼区間は[3.141481, 3.141667]


課題2

説明

バケツソート
0. 長さ10^9の配列bucketを用意する。要素はすべて0。i=0, j=0とする
1. ソートする配列の要素を1つずつみて、bucket[要素の値]+=1 する。
2. bucket[i] > 0 なら、a[j] = i, j+=1;
3. i+=1して i<length(array)なら2へ

すべての要素の値が0以上かつ10^9より小さいなら、O(n)でソート可能

選択ソート
0. i=0
1. arrayのi番目の要素と、,arrayのi番目以降で最小の要素を入れ替える
2. i+=1; i<nなら2.へ
O(n^2)である。

スターリンソート
#これはジョークです
0. i=j=1
1. i >= length(array)なら、配列の長さをjに書き換えて終了.
2. arrayのi番目の要素より(j-1)番目の要素を比較が小さければ、j番目をi番目の値で書き換える。j+=1する 
3. i+=1して1.へ

もとの配列の要素が失われる可能性があるが、O(n)

結果

入力:
10
5 3 7 1 9 3 1 7 4 10

出力:
bucket sort
1 1 3 3 4 5 7 7 9 10

original array
5 3 7 1 9 3 1 7 4 10

selection sort
1 1 3 3 4 5 7 7 9 10

just a joke
stalin sort
5 7 9 10
