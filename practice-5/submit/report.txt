実行結果
test_gate:
AND(0, 0) => 0
AND(0, 1) => 0
AND(1, 0) => 0
AND(1, 1) => 1
OR(0, 0) => 0
OR(0, 1) => 1
OR(1, 0) => 1
OR(1, 1) => 1
NOT(0) => 1
NOT(1) => 0
NAND(0, 0) => 1
NAND(0, 1) => 1
NAND(1, 0) => 1
NAND(1, 1) => 0
XOR(0, 0) => 0
XOR(0, 1) => 1
XOR(1, 0) => 1
XOR(1, 1) => 0

test_full_adder:
in1 = 0 in2 = 0 carry_in = 0
carry_out = 0, sum = 0
0 + 0 + 0 = 00
in1 = 0 in2 = 0 carry_in = 1
carry_out = 0, sum = 1
0 + 0 + 1 = 01
in1 = 0 in2 = 1 carry_in = 0
carry_out = 0, sum = 1
0 + 1 + 0 = 01
in1 = 0 in2 = 1 carry_in = 1
carry_out = 1, sum = 0
0 + 1 + 1 = 10
in1 = 1 in2 = 0 carry_in = 0
carry_out = 0, sum = 1
1 + 0 + 0 = 01
in1 = 1 in2 = 0 carry_in = 1
carry_out = 1, sum = 0
1 + 0 + 1 = 10
in1 = 1 in2 = 1 carry_in = 0
carry_out = 1, sum = 0
1 + 1 + 0 = 10
in1 = 1 in2 = 1 carry_in = 1
carry_out = 1, sum = 1
1 + 1 + 1 = 11

test_rca(-200, 200)
a   = 11111111111111111111111100111000(-200)
b   = 00000000000000000000000011001000(200)
sum = 00000000000000000000000000000000(0)
carry_out = 1


test_rca(0, 1)
a   = 00000000000000000000000000000000(0)
b   = 00000000000000000000000000000001(1)
sum = 00000000000000000000000000000001(1)
carry_out = 0


test_rca(8, 16)
a   = 00000000000000000000000000001000(8)
b   = 00000000000000000000000000010000(16)
sum = 00000000000000000000000000011000(24)
carry_out = 0


test_rca(100, -68)
a   = 00000000000000000000000001100100(100)
b   = 11111111111111111111111110111100(-68)
sum = 00000000000000000000000000100000(32)
carry_out = 1


test_rca(-1, 0)
a   = 11111111111111111111111111111111(-1)
b   = 00000000000000000000000000000000(0)
sum = 11111111111111111111111111111111(-1)
carry_out = 0

課題4
Carry Lookahead Adderにおける、 Carry inが全32に伝搬するまでの実行時間(AND/ORゲート単位)を数える
0. i = 0,1,...31; 入力としてai,bi,c0
1. gi = ai・bi, pi = ai+biの計算に必要なのは1ゲート分の時間(32ビット分bun並列で行う)
2. G = g3+p3g2+p3p2g1+p3p2p1g0, P=p0p1p2p3 GとPは並列で計算すると、4ゲート
3. Cout = G3 + G2P3 + G1P2P3+ G0P1P2P3 + P0P1P2P3c0　５ゲート
4. 上位16ビットCLAで各4ビットCLAへのCarryInを計算 (C1 ~ C3まで並列)
    C3 = G2 + P2C1 = G2 + G1P2 + G0P2P1 + P2P1P0Cout 4ゲート
5. 4ビットCLAで各桁へのCarryInを計算 (4.と平行)
    c3 = g2 + g1p2 + g0p1p2 + p0p1p2c0  4ゲート

以上で、32ビット各桁へCarryがいきわたるまで約14ゲート。

一方、RCAでは、96ゲート分必要。

計算速度においては、CLAの方が高速。

感想
課題4に苦戦した。考え方があっているか不安である。
"linker command failed with exit code 1"が気に入らない。
